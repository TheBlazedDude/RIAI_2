import argparse
import json
from pathlib import Path
from datetime import datetime

# Deterministic stub evaluator for predictor-finance
# Reads metrics generated by train_baselines (if present) and echoes evaluation report.


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--seed', type=int, default=42)
    parser.add_argument('--model_id', type=str, default='model_pred_stub_0001')
    args = parser.parse_args()

    current = Path(__file__).resolve()
    ROOT = current.parents[4]
    in_path = ROOT / 'app' / 'artifacts' / 'metrics' / 'predictor' / f'{args.model_id}.json'

    report = {
        'model_id': args.model_id,
        'capability': 'predictor',
        'seed': args.seed,
        'latency_ms': {'p50': 8.1, 'p95': 22.9},
        'mae': 0.92,
        'rmse': 1.24,
        'mape': 0.031,
        'horizon': 8,
        'env': {'cpu': 'x86_64', 'gpu': 'none'},
        'timestamp': datetime.now().astimezone().isoformat()
    }

    # If a prior train report exists, reuse its values to stay deterministic
    if in_path.exists():
        try:
            with in_path.open('r', encoding='utf-8') as f:
                prev = json.load(f)
                for k in ['mae','rmse','mape','latency_ms','horizon']:
                    if k in prev:
                        report[k] = prev[k]
        except Exception:
            pass

    print(json.dumps({'ok': True, 'report': report}))


if __name__ == '__main__':
    main()
